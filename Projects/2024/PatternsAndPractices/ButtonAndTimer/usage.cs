// this code snippet shows usage of the event driven interests generated by Button and Timer
// assembly:   nanoFramework.Iot.Device.Button
//
// more details for study:
//   https://github.com/nanoframework/nanoframework.IoT.Device/blob/develop/devices/Button/README.md/
//   https://docs.nanoframework.net/api/System.Threading.Timer.html


// namespaces
using Iot.Device.Button;
using System.Threading;


// ESP32 Hardware, board, chip, etc.
const int pinButton = 47;
const int pub_period = 60000;     // miliseconds

// Button setup
GpioButton buttonM5 = new GpioButton(buttonPin: pinButton, debounceTime: TimeSpan.FromMilliseconds(333));

// Timer setup
Timer pubTimer = new Timer((s) => FireTelemetryData(), null, 0, pub_period);






// Button handler/callback
buttonM5.Press += (sender, e) => 
{
    // the place to put the code for handling an event from the buttonM5
};



// Timer handler/callback
void FireTelemetryData()
{
  // the place to put the code for handling an event from the pubTimer
}




